"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/utils/helpers.jsx":
/*!*******************************!*\
  !*** ./src/utils/helpers.jsx ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decideSearchType: function() { return /* binding */ decideSearchType; }\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"./node_modules/openai/index.mjs\");\n/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../env.js */ \"./src/env.js\");\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: _env_js__WEBPACK_IMPORTED_MODULE_0__.env.NEXT_PUBLIC_OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n}); // TODO: edit later\n// Let's generalize the prompt and call the search types (1) and (2) in case the LLM is sensitive to the names. We can replace them with different names programmatically to see what works best.\nconst SEARCH_TYPE_EXPLANATION = \"- (1) search is usually preferred when the query is a broad topic or semantically complex because it lets us retrieve high quality, semantically relevant data. (1) search is especially suitable when a topic is well-known and popularly discussed on the Internet, allowing the machine learning model to retrieve contents which are more likely recommended by real humans.  \\n- (2) search is useful when the topic is specific, local or obscure. If the query is a specific person's name, and identifier, or acronym, such that relevant results will contain the query itself, (2) search may do well. And if the machine learning model doesn't know about the topic, but relevant documents can be found by directly matching the search query, (2) search may be necessary.\\n\";\nasync function getLLMResponse(param) {\n    let { system = \"You are a helpful assistant.\", user = \"\", temperature = 1, model = \"gpt-3.5-turbo\" } = param;\n    const completion = await openai.chat.completions.create({\n        model,\n        temperature,\n        messages: [\n            {\n                \"role\": \"system\",\n                \"content\": system\n            },\n            {\n                \"role\": \"user\",\n                \"content\": user\n            }\n        ]\n    });\n    return completion.choices[0].message.content;\n}\n// LLM chooses between search types and returns best type\nasync function decideSearchType(topic) {\n    let choiceNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [\n        \"neural\",\n        \"keyword\"\n    ];\n    let userMessage = 'Decide whether to use (1) or (2) search for the provided research topic. Output your choice in a single word: either \"(1)\" or \"(2)\". Here is a guide that will help you choose:\\n';\n    userMessage += SEARCH_TYPE_EXPLANATION;\n    userMessage += \"Topic: \".concat(topic, \"\\n\");\n    userMessage += \"Search type: \";\n    userMessage = userMessage.replaceAll(\"(1)\", choiceNames[0]).replaceAll(\"(2)\", choiceNames[1]);\n    const response = getLLMResponse({\n        system: \"You will be asked to make a choice between two options. Answer with your choice in a single word.\",\n        user: userMessage,\n        temperature: 0\n    });\n    console.log(\"r\", response.json);\n    const useKeyword = response.then().trim().toLowerCase().startsWith(choiceNames[1].toLowerCase());\n    return useKeyword ? \"keyword\" : \"neural\";\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvaGVscGVycy5qc3giLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRCO0FBQ0k7QUFFaEMsTUFBTUUsU0FBUyxJQUFJRiw4Q0FBTUEsQ0FBQztJQUFFRyxRQUFRRix3Q0FBR0EsQ0FBQ0csMEJBQTBCO0lBQUVDLHlCQUF5QjtBQUFJLElBQUssbUJBQW1CO0FBRXpILGlNQUFpTTtBQUNqTSxNQUFNQywwQkFBMkI7QUFJakMsZUFBZUMsZUFBZSxLQUE4RjtRQUE5RixFQUFDQyxTQUFTLDhCQUE4QixFQUFFQyxPQUFPLEVBQUUsRUFBRUMsY0FBYyxDQUFDLEVBQUVDLFFBQVEsZUFBZSxFQUFDLEdBQTlGO0lBQzFCLE1BQU1DLGFBQWEsTUFBTVYsT0FBT1csSUFBSSxDQUFDQyxXQUFXLENBQUNDLE1BQU0sQ0FBQztRQUNwREo7UUFDQUQ7UUFDQU0sVUFBVTtZQUNOO2dCQUFDLFFBQVE7Z0JBQVUsV0FBV1I7WUFBTTtZQUNwQztnQkFBQyxRQUFRO2dCQUFRLFdBQVdDO1lBQUk7U0FDbkM7SUFDTDtJQUNBLE9BQU9HLFdBQVdLLE9BQU8sQ0FBQyxFQUFFLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTztBQUNoRDtBQUVBLHlEQUF5RDtBQUNsRCxlQUFlQyxpQkFBaUJDLEtBQUs7UUFBRUMsY0FBQUEsaUVBQWM7UUFBQztRQUFVO0tBQVU7SUFDN0UsSUFBSUMsY0FBYztJQUNsQkEsZUFBZWpCO0lBQ2ZpQixlQUFlLFVBQWdCLE9BQU5GLE9BQU07SUFDL0JFLGVBQWdCO0lBQ2hCQSxjQUFjQSxZQUFZQyxVQUFVLENBQUMsT0FBT0YsV0FBVyxDQUFDLEVBQUUsRUFBRUUsVUFBVSxDQUFDLE9BQU9GLFdBQVcsQ0FBQyxFQUFFO0lBRTVGLE1BQU1HLFdBQVdsQixlQUFlO1FBQzVCQyxRQUFRO1FBQ1JDLE1BQU1jO1FBQ05iLGFBQWE7SUFDakI7SUFDQWdCLFFBQVFDLEdBQUcsQ0FBQyxLQUFLRixTQUFTRyxJQUFJO0lBQzlCLE1BQU1DLGFBQWFKLFNBQVNLLElBQUksR0FBR0MsSUFBSSxHQUFHQyxXQUFXLEdBQUdDLFVBQVUsQ0FBQ1gsV0FBVyxDQUFDLEVBQUUsQ0FBQ1UsV0FBVztJQUM3RixPQUFPSCxhQUFhLFlBQVk7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3V0aWxzL2hlbHBlcnMuanN4PzlhMDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9wZW5BSSBmcm9tICdvcGVuYWknO1xuaW1wb3J0IHsgZW52IH0gZnJvbSBcIi4uL2Vudi5qc1wiO1xuXG5jb25zdCBvcGVuYWkgPSBuZXcgT3BlbkFJKHsgYXBpS2V5OiBlbnYuTkVYVF9QVUJMSUNfT1BFTkFJX0FQSV9LRVksIGRhbmdlcm91c2x5QWxsb3dCcm93c2VyOiB0cnVlfSk7ICAvLyBUT0RPOiBlZGl0IGxhdGVyXG5cbi8vIExldCdzIGdlbmVyYWxpemUgdGhlIHByb21wdCBhbmQgY2FsbCB0aGUgc2VhcmNoIHR5cGVzICgxKSBhbmQgKDIpIGluIGNhc2UgdGhlIExMTSBpcyBzZW5zaXRpdmUgdG8gdGhlIG5hbWVzLiBXZSBjYW4gcmVwbGFjZSB0aGVtIHdpdGggZGlmZmVyZW50IG5hbWVzIHByb2dyYW1tYXRpY2FsbHkgdG8gc2VlIHdoYXQgd29ya3MgYmVzdC5cbmNvbnN0IFNFQVJDSF9UWVBFX0VYUExBTkFUSU9OID0gYC0gKDEpIHNlYXJjaCBpcyB1c3VhbGx5IHByZWZlcnJlZCB3aGVuIHRoZSBxdWVyeSBpcyBhIGJyb2FkIHRvcGljIG9yIHNlbWFudGljYWxseSBjb21wbGV4IGJlY2F1c2UgaXQgbGV0cyB1cyByZXRyaWV2ZSBoaWdoIHF1YWxpdHksIHNlbWFudGljYWxseSByZWxldmFudCBkYXRhLiAoMSkgc2VhcmNoIGlzIGVzcGVjaWFsbHkgc3VpdGFibGUgd2hlbiBhIHRvcGljIGlzIHdlbGwta25vd24gYW5kIHBvcHVsYXJseSBkaXNjdXNzZWQgb24gdGhlIEludGVybmV0LCBhbGxvd2luZyB0aGUgbWFjaGluZSBsZWFybmluZyBtb2RlbCB0byByZXRyaWV2ZSBjb250ZW50cyB3aGljaCBhcmUgbW9yZSBsaWtlbHkgcmVjb21tZW5kZWQgYnkgcmVhbCBodW1hbnMuICBcbi0gKDIpIHNlYXJjaCBpcyB1c2VmdWwgd2hlbiB0aGUgdG9waWMgaXMgc3BlY2lmaWMsIGxvY2FsIG9yIG9ic2N1cmUuIElmIHRoZSBxdWVyeSBpcyBhIHNwZWNpZmljIHBlcnNvbidzIG5hbWUsIGFuZCBpZGVudGlmaWVyLCBvciBhY3JvbnltLCBzdWNoIHRoYXQgcmVsZXZhbnQgcmVzdWx0cyB3aWxsIGNvbnRhaW4gdGhlIHF1ZXJ5IGl0c2VsZiwgKDIpIHNlYXJjaCBtYXkgZG8gd2VsbC4gQW5kIGlmIHRoZSBtYWNoaW5lIGxlYXJuaW5nIG1vZGVsIGRvZXNuJ3Qga25vdyBhYm91dCB0aGUgdG9waWMsIGJ1dCByZWxldmFudCBkb2N1bWVudHMgY2FuIGJlIGZvdW5kIGJ5IGRpcmVjdGx5IG1hdGNoaW5nIHRoZSBzZWFyY2ggcXVlcnksICgyKSBzZWFyY2ggbWF5IGJlIG5lY2Vzc2FyeS5cbmA7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldExMTVJlc3BvbnNlKHtzeXN0ZW0gPSAnWW91IGFyZSBhIGhlbHBmdWwgYXNzaXN0YW50LicsIHVzZXIgPSAnJywgdGVtcGVyYXR1cmUgPSAxLCBtb2RlbCA9ICdncHQtMy41LXR1cmJvJ30pe1xuICAgIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCBvcGVuYWkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoe1xuICAgICAgICBtb2RlbCxcbiAgICAgICAgdGVtcGVyYXR1cmUsXG4gICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7J3JvbGUnOiAnc3lzdGVtJywgJ2NvbnRlbnQnOiBzeXN0ZW19LFxuICAgICAgICAgICAgeydyb2xlJzogJ3VzZXInLCAnY29udGVudCc6IHVzZXJ9LFxuICAgICAgICBdXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbXBsZXRpb24uY2hvaWNlc1swXS5tZXNzYWdlLmNvbnRlbnQ7XG59XG5cbi8vIExMTSBjaG9vc2VzIGJldHdlZW4gc2VhcmNoIHR5cGVzIGFuZCByZXR1cm5zIGJlc3QgdHlwZVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlY2lkZVNlYXJjaFR5cGUodG9waWMsIGNob2ljZU5hbWVzID0gWyduZXVyYWwnLCAna2V5d29yZCddKXtcbiAgICBsZXQgdXNlck1lc3NhZ2UgPSAnRGVjaWRlIHdoZXRoZXIgdG8gdXNlICgxKSBvciAoMikgc2VhcmNoIGZvciB0aGUgcHJvdmlkZWQgcmVzZWFyY2ggdG9waWMuIE91dHB1dCB5b3VyIGNob2ljZSBpbiBhIHNpbmdsZSB3b3JkOiBlaXRoZXIgXCIoMSlcIiBvciBcIigyKVwiLiBIZXJlIGlzIGEgZ3VpZGUgdGhhdCB3aWxsIGhlbHAgeW91IGNob29zZTpcXG4nO1xuICAgIHVzZXJNZXNzYWdlICs9IFNFQVJDSF9UWVBFX0VYUExBTkFUSU9OO1xuICAgIHVzZXJNZXNzYWdlICs9IGBUb3BpYzogJHt0b3BpY31cXG5gO1xuICAgIHVzZXJNZXNzYWdlICs9IGBTZWFyY2ggdHlwZTogYDtcbiAgICB1c2VyTWVzc2FnZSA9IHVzZXJNZXNzYWdlLnJlcGxhY2VBbGwoJygxKScsIGNob2ljZU5hbWVzWzBdKS5yZXBsYWNlQWxsKCcoMiknLCBjaG9pY2VOYW1lc1sxXSk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGdldExMTVJlc3BvbnNlKHtcbiAgICAgICAgc3lzdGVtOiAnWW91IHdpbGwgYmUgYXNrZWQgdG8gbWFrZSBhIGNob2ljZSBiZXR3ZWVuIHR3byBvcHRpb25zLiBBbnN3ZXIgd2l0aCB5b3VyIGNob2ljZSBpbiBhIHNpbmdsZSB3b3JkLicsXG4gICAgICAgIHVzZXI6IHVzZXJNZXNzYWdlLFxuICAgICAgICB0ZW1wZXJhdHVyZTogMFxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKCdyJywgcmVzcG9uc2UuanNvbilcbiAgICBjb25zdCB1c2VLZXl3b3JkID0gcmVzcG9uc2UudGhlbigpLnRyaW0oKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoY2hvaWNlTmFtZXNbMV0udG9Mb3dlckNhc2UoKSk7XG4gICAgcmV0dXJuIHVzZUtleXdvcmQgPyAna2V5d29yZCcgOiAnbmV1cmFsJztcbn1cbiJdLCJuYW1lcyI6WyJPcGVuQUkiLCJlbnYiLCJvcGVuYWkiLCJhcGlLZXkiLCJORVhUX1BVQkxJQ19PUEVOQUlfQVBJX0tFWSIsImRhbmdlcm91c2x5QWxsb3dCcm93c2VyIiwiU0VBUkNIX1RZUEVfRVhQTEFOQVRJT04iLCJnZXRMTE1SZXNwb25zZSIsInN5c3RlbSIsInVzZXIiLCJ0ZW1wZXJhdHVyZSIsIm1vZGVsIiwiY29tcGxldGlvbiIsImNoYXQiLCJjb21wbGV0aW9ucyIsImNyZWF0ZSIsIm1lc3NhZ2VzIiwiY2hvaWNlcyIsIm1lc3NhZ2UiLCJjb250ZW50IiwiZGVjaWRlU2VhcmNoVHlwZSIsInRvcGljIiwiY2hvaWNlTmFtZXMiLCJ1c2VyTWVzc2FnZSIsInJlcGxhY2VBbGwiLCJyZXNwb25zZSIsImNvbnNvbGUiLCJsb2ciLCJqc29uIiwidXNlS2V5d29yZCIsInRoZW4iLCJ0cmltIiwidG9Mb3dlckNhc2UiLCJzdGFydHNXaXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/helpers.jsx\n"));

/***/ })

});